// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var loadRuleDir = require("./load-rules");
var objectAssign = require("object-assign");
// dictionary dictionary

var RuleManager = (function () {
    function RuleManager() {
        _classCallCheck(this, RuleManager);

        /**
         * @typedef {{key: Function}} RulesObject
         */
        /**
         * Defined all rules in this object.
         * @type {RulesObject}
         */
        this.rules = {};
    }

    /**
     * has rule at least one > 0
     * @returns {boolean}
     */

    _createClass(RuleManager, [{
        key: "hasRuleAtLeastOne",
        value: function hasRuleAtLeastOne() {
            return this.getAllRuleNames().length > 0;
        }
    }, {
        key: "getAllRuleNames",
        value: function getAllRuleNames() {
            return Object.keys(this.rules);
        }
    }, {
        key: "getRule",
        value: function getRule(ruleKey) {
            return this.rules[ruleKey];
        }

        /**
         * @returns {RulesObject}
         */
    }, {
        key: "getAllRules",
        value: function getAllRules() {
            return this.rules;
        }
    }, {
        key: "isDefinedRule",
        value: function isDefinedRule(ruleKey) {
            return this.getRule(ruleKey) != null;
        }

        /**
         *
         * @param {string} ruleDir ruleDir is rule directory.
         * @returns {RulesObject}
         */
    }, {
        key: "loadRules",
        value: function loadRules(ruleDir) {
            objectAssign(this.rules, loadRuleDir(ruleDir));
            return this.rules;
        }

        /**
         * Registers all given rules of a plugin.
         * @param {Object} pluginRules A key/value map of rule definitions.
         * @param {String} pluginName The name of the plugin without prefix (`textlint-plugin-`).
         * @returns {void}
         */
    }, {
        key: "importPlugin",
        value: function importPlugin(pluginRules, pluginName) {
            var _this = this;

            Object.keys(pluginRules).forEach(function (ruleId) {
                var qualifiedRuleId = pluginName + "/" + ruleId;
                var ruleCreator = pluginRules[ruleId];
                _this.defineRule(qualifiedRuleId, ruleCreator);
            });
        }

        /**
         *
         * @param {string} ruleKey
         * @param ruleHandler
         */
    }, {
        key: "defineRule",
        value: function defineRule(ruleKey, ruleHandler) {
            this.rules[ruleKey] = ruleHandler;
        }
    }, {
        key: "resetRules",
        value: function resetRules() {
            this.rules = Object.create(null);
        }
    }]);

    return RuleManager;
})();

exports["default"] = RuleManager;
module.exports = exports["default"];
//# sourceMappingURL=rule-manager.js.map