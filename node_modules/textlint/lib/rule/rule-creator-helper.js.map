{"version":3,"sources":["../../src/rule/rule-creator-helper.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;;;;;;AAON,SAAS,eAAe,CAAC,UAAU,EAAY;QAAV,GAAG,yDAAG,EAAE;;AAChD,QAAI,UAAU,KAAK,SAAS,EAAE;AAC1B,cAAM,IAAI,KAAK,0BAAyB,GAAG,sBAAoB,CAAC;KACnE;;;;;;AAOD,QAAI,OAAO,UAAU,KAAK,UAAU,EAAE;AAClC,YAAI,OAAO,UAAU,CAAC,KAAK,KAAK,UAAU,IAAI,OAAO,UAAU,CAAC,MAAM,KAAK,UAAU,EAAE;AACnF,kBAAM,IAAI,KAAK,0BAAyB,GAAG,+GAInD,CAAC;SACI;KACJ;CACJ;;;;;;;;;AAOM,SAAS,SAAS,CAAC,WAAW,EAAE;AACnC,QAAI,OAAO,WAAW,CAAC,MAAM,KAAK,UAAU,EAAE;AAC1C,eAAO,WAAW,CAAC,MAAM,CAAC;KAC7B;AACD,QAAI,OAAO,WAAW,KAAK,UAAU,EAAE;AACnC,eAAO,WAAW,CAAC;KACtB;AACD,UAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;CACnE;;;;;;;;;AAOM,SAAS,QAAQ,CAAC,WAAW,EAAE;AAClC,QAAI,OAAO,WAAW,CAAC,KAAK,KAAK,UAAU,EAAE;AACzC,eAAO,WAAW,CAAC,KAAK,CAAC;KAC5B;AACD,QAAI,OAAO,WAAW,KAAK,UAAU,EAAE;AACnC,eAAO,WAAW,CAAC;KACtB;AACD,UAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;CAClE","file":"rule-creator-helper.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/**\n * Validate rule module.\n * if invalid throw error\n * @param {any} ruleModule\n * @param {string} key\n */\nexport function assertRuleShape(ruleModule, key = \"\") {\n    if (ruleModule === undefined) {\n        throw new Error(`Definition of rule '${ key }' was not found.`);\n    }\n    /*\n    Check old rule function\n    module.exports = function(context){\n\n    }\n    */\n    if (typeof ruleModule !== \"function\") {\n        if (typeof ruleModule.fixer !== \"function\" || typeof ruleModule.linter !== \"function\") {\n            throw new Error(`Definition of rule '${ key }' was not found.\nRule should export function:\nmodule.exports = function(context){\n    // Your rule\n};`);\n        }\n    }\n}\n/**\n * get linter function from ruleCreator\n * if not found, throw error\n * @param {any} ruleCreator\n * @returns {Function} linter function\n */\nexport function getLinter(ruleCreator) {\n    if (typeof ruleCreator.linter === \"function\") {\n        return ruleCreator.linter;\n    }\n    if (typeof ruleCreator === \"function\") {\n        return ruleCreator;\n    }\n    throw new Error(\"Not found linter function in the ruleCreator\");\n}\n/**\n * get fixer function from ruleCreator\n * if not found, throw error\n * @param {any} ruleCreator\n * @returns {Function} fixer function\n */\nexport function getFixer(ruleCreator) {\n    if (typeof ruleCreator.fixer === \"function\") {\n        return ruleCreator.fixer;\n    }\n    if (typeof ruleCreator === \"function\") {\n        return ruleCreator;\n    }\n    throw new Error(\"Not found fixer function in the ruleCreator\");\n}"]}