{"version":3,"sources":["../../src/rule/source-location.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;;;;;4BAGgB,mBAAmB;;AAFhD,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;IAEzB,cAAc;;;;;;AAKpB,aALM,cAAc,CAKnB,MAAM,EAAE;8BALH,cAAc;;AAM3B,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;;;;;;;;;;iBAPgB,cAAc;;eAgBzB,gBAAC,IAAI,EAAE,OAAO,EAAE;;;;;AAKlB,gBAAI,6BAA6B,YAAA,CAAC;AAClC,gBAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC7B,6CAA6B,GAAG,OAAO,CAAC;AACxC,0OAQV,CAAC;aACM;;AAED,gBAAI,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE;;AAE5D,4VAWV,CAAC;aACM;;;AAGD,gBAAI,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAA,IAAK,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE;;;;AAI7F,sBAAM,IAAI,KAAK,oSAazB,CAAC;aACM;;AAED,gBAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,6BAA6B,CAAC,CAAC;AAClF,gBAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;;;;;;;AAQnD,mBAAO,YAAY,CAAC,EAAE,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;SACrD;;;eAES,oBAAC,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE;AACrC,gBAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;AAC7B,gBAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;AACjC,gBAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC;;;AAGrC,gBAAI,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,aAAa,KAAK,SAAS,EAAE;AAC5D,oBAAM,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACpC,oBAAM,YAAY,GAAG,aAAa,IAAI,OAAO,CAAC,KAAK,CAAC;AACpD,oBAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,cAAc,GAAG,YAAY,CAAC,CAAC;AAC5E,uBAAO;AACH,0BAAM,EAAE,QAAQ,CAAC,MAAM;AACvB,wBAAI,EAAE,QAAQ,CAAC,IAAI;iBACtB,CAAC;aACL;;AAED,gBAAI,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE;AAC5D,oBAAI,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE;AAClB,wBAAM,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;;;AAGtC,wBAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AACpB,+BAAO;AACH,gCAAI,EAAE,SAAS;AACf,kCAAM,EAAE,OAAO,CAAC,MAAM;yBACzB,CAAC;qBACL,MAAM;AACH,+BAAO;AACH,gCAAI,EAAE,SAAS;AACf,kCAAM,EAAN,MAAM;yBACT,CAAC;qBACL;iBACJ;aACJ;;AAED,gBAAI,OAAO,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE;AAChD,oBAAM,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AACtC,uBAAO;AACH,wBAAI,EAAE,SAAS;AACf,0BAAM,EAAN,MAAM;iBACT,CAAC;aACL;;;;;;;;;AASD,gBAAI,OAAO,CAAC,MAAM,KAAK,SAAS,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AACpD,oBAAM,WAAW,GAAG,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAC5C,uBAAO;AACH,wBAAI,EAAJ,IAAI;AACJ,0BAAM,EAAE,WAAW;iBACtB,CAAC;aACL;;AAED,mBAAO;AACH,sBAAM,EAAN,MAAM;AACN,oBAAI,EAAJ,IAAI;aACP,CAAC;SACL;;;eAES,oBAAC,IAAI,EAAE,OAAO,EAAE;AACtB,gBAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;;AAE7B,gBAAI,OAAO,CAAC,GAAG,KAAK,SAAS,EAAE;AAC3B,uBAAO,EAAE,CAAC;aACb;AACD,kBAAM,CAAC,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,EAAE,iCAAiC,CAAC,CAAC;AAC3E,mBAAO;;AAEH,mBAAG,EAAE;AACD,yBAAK,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACjF,wBAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI;iBACzB;aACJ,CAAC;SACL;;;WAlKgB,cAAc;;;qBAAd,cAAc","file":"source-location.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nconst ObjectAssign = require(\"object-assign\");\nimport {throwIfTesting} from \"../util/throw-log\";\nexport default class SourceLocation {\n    /**\n     *\n     * @param {SourceCode} source\n     */\n    constructor(source) {\n        this.source = source;\n    }\n\n    /**\n     * adjust node's location with error's padding location.\n     *\n     * @param {TxtNode} node\n     * @param {RuleError} padding\n     * @returns {{line: number, column: number, fix?: FixCommand}}\n     */\n    adjust(node, padding) {\n        /*\n            FIXME: It is old way and un-document way\n            new RuleError(\"message\", index);\n         */\n        let _backwardCompatibleIndexValue;\n        if (typeof padding === \"number\") {\n            _backwardCompatibleIndexValue = padding;\n            throwIfTesting(`This is un-document way:\nreport(node, new RuleError(\"message\", index);\n\nPlease use { index }: \n\nreport(node, new RuleError(\"message\", {\n    index: paddingLineColumn\n});\n`);\n        }\n        // when running from textlint-tester, assert\n        if (padding.line === undefined && padding.column !== undefined) {\n            // FIXME: Backward compatible <= textlint.5.5\n            throwIfTesting(`Have to use a sets with \"line\" and \"column\".\nreport(node, new RuleError(\"message\", {\n    line: paddingLineNumber,\n    column: paddingLineColumn\n});\n\nOR use \"index\" property insteadof only \"column\".\n\nreport(node, new RuleError(\"message\", {\n    index: paddingLineColumn\n});\n`);\n        }\n\n        // Not use {column, line} with {index}\n        if ((padding.line !== undefined || padding.column !== undefined) && padding.index !== undefined) {\n            // Introduced textlint 5.6\n            // https://github.com/textlint/textlint/releases/tag/5.6.0\n            // Always throw Error\n            throw new Error(`Have to use {line, column} or index.\n=> use either one of the two\n\nreport(node, new RuleError(\"message\", {\n    line: paddingLineNumber,\n    column: paddingLineColumn\n});\n\nOR use \"index\" property\n\nreport(node, new RuleError(\"message\", {\n    index: paddingIndexValue\n});\n`);\n        }\n\n        const adjustedLoc = this._adjustLoc(node, padding, _backwardCompatibleIndexValue);\n        const adjustedFix = this._adjustFix(node, padding);\n        /*\n        {\n            line,\n            column\n            fix?\n        }\n         */\n        return ObjectAssign({}, adjustedLoc, adjustedFix);\n    }\n\n    _adjustLoc(node, padding, _paddingIndex) {\n        const nodeRange = node.range;\n        const line = node.loc.start.line;\n        const column = node.loc.start.column;\n\n        // when use {index}\n        if (padding.index !== undefined || _paddingIndex !== undefined) {\n            const startNodeIndex = nodeRange[0];\n            const paddingIndex = _paddingIndex || padding.index;\n            const position = this.source.indexToPosition(startNodeIndex + paddingIndex);\n            return {\n                column: position.column,\n                line: position.line\n            };\n        }\n        // when use {line, column}\n        if (padding.line !== undefined && padding.column !== undefined) {\n            if (padding.line > 0) {\n                const addedLine = line + padding.line;\n                // when report with padding {line, column}, message.column should be 0 + padding.column.\n                // In other word, padding line > 0 and message.column start with 0.\n                if (padding.column > 0) {\n                    return {\n                        line: addedLine,\n                        column: padding.column\n                    };\n                } else {\n                    return {\n                        line: addedLine,\n                        column\n                    };\n                }\n            }\n        }\n        // when use { line }\n        if (padding.line !== undefined && padding.line > 0) {\n            const addedLine = line + padding.line;\n            return {\n                line: addedLine,\n                column\n            };\n        }\n        // when use { column }\n        // FIXME: backward compatible @ un-document\n        // Remove next version 6?\n        /*\n            new RuleError({\n                column: index\n            });\n         */\n        if (padding.column !== undefined && padding.column > 0) {\n            const addedColumn = column + padding.column;\n            return {\n                line,\n                column: addedColumn\n            };\n        }\n\n        return {\n            column,\n            line\n        };\n    }\n\n    _adjustFix(node, padding) {\n        const nodeRange = node.range;\n        // if not found `fix`, return empty object\n        if (padding.fix === undefined) {\n            return {};\n        }\n        assert(typeof padding.fix === \"object\", \"fix should be FixCommand object\");\n        return {\n            // fix(command) is relative from node's range\n            fix: {\n                range: [nodeRange[0] + padding.fix.range[0], nodeRange[0] + padding.fix.range[1]],\n                text: padding.fix.text\n            }\n        };\n    }\n}"]}