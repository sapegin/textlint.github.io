// LICENSE : MIT
"use strict";
/**
 * Validate rule module.
 * if invalid throw error
 * @param {any} ruleModule
 * @param {string} key
 */
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.assertRuleShape = assertRuleShape;
exports.getLinter = getLinter;
exports.getFixer = getFixer;

function assertRuleShape(ruleModule) {
    var key = arguments.length <= 1 || arguments[1] === undefined ? "" : arguments[1];

    if (ruleModule === undefined) {
        throw new Error("Definition of rule '" + key + "' was not found.");
    }
    /*
    Check old rule function
    module.exports = function(context){
     }
    */
    if (typeof ruleModule !== "function") {
        if (typeof ruleModule.fixer !== "function" || typeof ruleModule.linter !== "function") {
            throw new Error("Definition of rule '" + key + "' was not found.\nRule should export function:\nmodule.exports = function(context){\n    // Your rule\n};");
        }
    }
}

/**
 * get linter function from ruleCreator
 * if not found, throw error
 * @param {any} ruleCreator
 * @returns {Function} linter function
 */

function getLinter(ruleCreator) {
    if (typeof ruleCreator.linter === "function") {
        return ruleCreator.linter;
    }
    if (typeof ruleCreator === "function") {
        return ruleCreator;
    }
    throw new Error("Not found linter function in the ruleCreator");
}

/**
 * get fixer function from ruleCreator
 * if not found, throw error
 * @param {any} ruleCreator
 * @returns {Function} fixer function
 */

function getFixer(ruleCreator) {
    if (typeof ruleCreator.fixer === "function") {
        return ruleCreator.fixer;
    }
    if (typeof ruleCreator === "function") {
        return ruleCreator;
    }
    throw new Error("Not found fixer function in the ruleCreator");
}
//# sourceMappingURL=rule-creator-helper.js.map