{"version":3,"sources":["../../src/rule/rule-context.js"],"names":[],"mappings":";AACA,YAAY,CAAC;AACb,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,IAAM,SAAS,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAC1D,IAAM,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC1C,IAAM,aAAa,GAAG;AAClB,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,aAAS,EAAE,CAAC;AACZ,WAAO,EAAE,CAAC;CACb,CAAC;;;;;;AAMF,SAAS,WAAW,CAAC,UAAU,EAAE;AAC7B,QAAI,UAAU,IAAI,IAAI,EAAE;AACpB,eAAO,aAAa,CAAC,KAAK,CAAC;KAC9B;;AAED,QAAI,OAAO,UAAU,KAAK,SAAS,EAAE;AACjC,eAAO,UAAU,GAAG,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC;KAChE;AACD,QAAI,UAAU,CAAC,QAAQ,EAAE;AACrB,cAAM,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,SAAS,0EAG5D,CAAC;AACI,eAAO,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KAC7C;AACD,WAAO,aAAa,CAAC,KAAK,CAAC;CAC9B;;;;;;;;;;;;AAYD,SAAS,WAAW,CAAC,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE;AACzE,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,EAAC,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC;AACnD,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAC,KAAK,EAAE,cAAc,EAAC,CAAC,CAAC;AAC/D,QAAM,QAAQ,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;;;;;;AAMzC,QAAI,CAAC,MAAM,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;AACjC,cAAM,CAAC,EAAE,IAAI,YAAY,SAAS,CAAA,AAAC,EAAE,sCAAsC,CAAC,CAAC;AAC7E,YAAI,KAAK,YAAY,SAAS,EAAE;AAC5B,kBAAM,CAAC,EAAC,MAAM,EAAN,MAAM,EAAE,IAAI,EAAJ,IAAI,EAAE,QAAQ,EAAR,QAAQ,EAAE,KAAK,EAAL,KAAK,EAAC,CAAC,CAAC;SAC3C,MAAM;AACH,gBAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC;AACnD,kBAAM,CAAC,EAAC,MAAM,EAAN,MAAM,EAAE,IAAI,EAAJ,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAL,KAAK,EAAC,CAAC,CAAC;SAClD;KACJ,CAAC;;AAEF,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AAClC,WAAG,EAAA,eAAE;AACD,mBAAO,UAAU,CAAC,SAAS,EAAE,CAAC;SACjC;KACJ,CAAC,CAAC;AACH,QAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC3D,QAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;;AAEvD,QAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;AAE3B,QAAI,CAAC,KAAK,GAAG,IAAI,SAAS,EAAE,CAAC;CAChC;AACD,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"rule-context.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nconst RuleFixer = require(\"../fixer/rule-fixer-commaner\");\nconst RuleError = require(\"./rule-error\");\nconst SeverityLevel = {\n    \"none\": 0,\n    \"info\": 0,\n    \"warning\": 1,\n    \"error\": 2\n};\n/**\n *\n * @param ruleConfig\n * @returns {number}\n */\nfunction getSeverity(ruleConfig) {\n    if (ruleConfig == null) {\n        return SeverityLevel.error;\n    }\n    // rule:<true|false>\n    if (typeof ruleConfig === \"boolean\") {\n        return ruleConfig ? SeverityLevel.error : SeverityLevel.none;\n    }\n    if (ruleConfig.severity) {\n        assert(SeverityLevel[ruleConfig.severity] !== undefined, `please set\n\"rule-key\": {\n    \"severity\": \"<warning|error>\"\n}`);\n        return SeverityLevel[ruleConfig.severity];\n    }\n    return SeverityLevel.error;\n}\n\n/**\n * Rule context object is passed to each rule as `context`\n * @param ruleId\n * @param sourceCode\n * @param report\n * @param textLintConfig\n * @param ruleConfig\n * @returns {*}\n * @constructor\n */\nfunction RuleContext(ruleId, sourceCode, report, textLintConfig, ruleConfig) {\n    Object.defineProperty(this, \"id\", {value: ruleId});\n    Object.defineProperty(this, \"config\", {value: textLintConfig});\n    const severity = getSeverity(ruleConfig);\n    /**\n     *\n     * @param {TxtNode} node\n     * @param {RuleError|any} error error is a RuleError instance or any data\n     */\n    this.report = function (node, error) {\n        assert(!(node instanceof RuleError), \"should be `report(node, ruleError);`\");\n        if (error instanceof RuleError) {\n            report({ruleId, node, severity, error});\n        } else {\n            const level = error.severity || SeverityLevel.info;\n            report({ruleId, node, severity: level, error});\n        }\n    };\n    // Const Values\n    Object.defineProperty(this, \"Syntax\", {\n        get(){\n            return sourceCode.getSyntax();\n        }\n    });\n    this.getFilePath = sourceCode.getFilePath.bind(sourceCode);\n    this.getSource = sourceCode.getSource.bind(sourceCode);\n    // CustomError object\n    this.RuleError = RuleError;\n    // fixer\n    this.fixer = new RuleFixer();\n}\nmodule.exports = RuleContext;\n"]}