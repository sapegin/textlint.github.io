{"version":3,"sources":["../../src/task/textlint-core-task.js"],"names":[],"mappings":"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","file":"textlint-core-task.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst EventEmitter = require(\"events\");\nconst TraverseController = require(\"txt-ast-traverse\").Controller;\nconst RuleError = require(\"./../rule/rule-error\");\nconst PromiseEventEmitter = require(\"carrack\");\nconst SourceLocation = require(\"./../rule/source-location\");\nconst traverseController = new TraverseController();\nconst debug = require(\"debug\")(\"textlint:core-task\");\n// Promised EventEmitter\nclass RuleTypeEmitter extends PromiseEventEmitter {\n    constructor() {\n        super();\n        this.setMaxListeners(0);\n    }\n}\nexport default class TextLintCoreTask extends EventEmitter {\n    static get events() {\n        return {\n            // receive start event\n            start: \"start\",\n            // receive message from each rules\n            message: \"message\",\n            // receive complete event\n            complete: \"complete\",\n            // receive error event\n            error: \"error\"\n        };\n    }\n\n    constructor({config, rules, rulesConfig, sourceCode}) {\n        super();\n        this.config = config;\n        this.rules = rules;\n        this.rulesConfig = rulesConfig;\n        this.sourceCode = sourceCode;\n        this.sourceLocation = new SourceLocation(this.sourceCode);\n        this.ruleTypeEmitter = new RuleTypeEmitter();\n    }\n\n    /**\n     * push new RuleError to results\n     * @param {string} ruleId\n     * @param {TxtNode} node\n     * @param {number} severity\n     * @param {RuleError|any} error error is a RuleError instance or any data\n     */\n    report({ruleId, node, severity, error}) {\n        debug(\"pushReport %s\", error);\n        const {line, column, fix} = this.sourceLocation.adjust(node, error);\n        // add TextLintMessage\n        const message = {\n            ruleId: ruleId,\n            message: error.message,\n            // See https://github.com/textlint/textlint/blob/master/typing/textlint.d.ts\n            line: line,        // start with 1(1-based line number)\n            column: column + 1,// start with 1(1-based column number)\n            severity: severity // it's for compatible ESLint formatter\n        };\n        if (fix) {\n            message.fix = fix;\n        }\n        if (!(error instanceof RuleError)) {\n            // `error` is a any data.\n            const data = error;\n            message.data = data;\n        }\n        this.emit(TextLintCoreTask.events.message, message);\n    }\n\n    /**\n     * Process ast tree.\n     * You can listen message by `task.on(\"message\", message => {})`\n     * @param {TxtNode} astTree astTree is compatible TxtNode tree.\n     */\n    process(astTree) {\n        const promiseQueue = [];\n        const listenerCount = (typeof this.ruleTypeEmitter.listenerCount !== \"undefined\")\n            ? this.ruleTypeEmitter.listenerCount.bind(this.ruleTypeEmitter) // Node 4.x >=\n            : EventEmitter.listenerCount.bind(EventEmitter, this.ruleTypeEmitter);// Node 0.12\n\n        this.emit(TextLintCoreTask.events.start);\n\n        const ruleTypeEmitter = this.ruleTypeEmitter;\n        traverseController.traverse(astTree, {\n            enter(node, parent) {\n                const type = node.type;\n                Object.defineProperty(node, \"parent\", {value: parent});\n                if (listenerCount(type) > 0) {\n                    const promise = ruleTypeEmitter.emit(type, node);\n                    promiseQueue.push(promise);\n                }\n            },\n            leave(node) {\n                const type = `${node.type}:exit`;\n                if (listenerCount(type) > 0) {\n                    const promise = ruleTypeEmitter.emit(type, node);\n                    promiseQueue.push(promise);\n                }\n            }\n        });\n        Promise.all(promiseQueue).then(() => {\n            this.emit(TextLintCoreTask.events.complete);\n        }).catch(error => {\n            this.emit(TextLintCoreTask.events.error, error);\n        });\n    }\n}"]}