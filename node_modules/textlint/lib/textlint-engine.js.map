{"version":3,"sources":["../src/textlint-engine.js"],"names":[],"mappings":"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","file":"textlint-engine.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst interopRequire = require(\"interop-require\");\nimport TextLintCore from \"./textlint-core\";\nconst RuleManager = require(\"./rule/rule-manager\");\nconst Config = require(\"./config/config\");\nconst createFormatter = require(\"textlint-formatter\");\nconst tryResolve = require(\"try-resolve\");\nconst path = require(\"path\");\nimport {isPluginRuleKey} from \"./util/config-util\";\nimport {findFiles} from \"./util/find-util\";\nimport Logger from \"./util/logger\";\nconst debug = require(\"debug\")(\"textlint:cli-engine\");\nclass TextLintEngine {\n    /**\n     * Process files are wanted to lint.\n     * TextLintEngine is a wrapper of textlint.js.\n     * Aim to be called from cli with cli options.\n     * @param {TextLintConfig} options the options is command line options or Config object.\n     * @constructor\n     */\n    constructor(options) {\n        /**\n         * @type {Config}\n         */\n        this.config = null;\n        if (options instanceof Config) {\n            // Almost internal use-case\n            this.config = options;\n        } else {\n            this.config = Config.initWithAutoLoading(options);\n        }\n\n        /**\n         * @type {TextLintCore}\n         */\n        this.textLint = new TextLintCore(this.config);\n\n        this.ruleManager = new RuleManager();\n        // load rule/plugin/processor\n        this._setupRules(this.config);\n        // execute files that are filtered by availableExtensions.\n        this.availableExtensions = this.textLint.processors.reduce((availableExtensions, processor) => {\n            const Processor = processor.constructor;\n            return availableExtensions.concat(Processor.availableExtensions());\n        }, this.config.extensions);\n    }\n\n    /**\n     * set up lint rules using {@lint Config} object.\n     * The {@lint Config} object was created with initialized {@link TextLintEngine} (as-known Constructor).\n     * @param {Config} config the config is parsed object\n     * @private\n     */\n    _setupRules(config) {\n        debug(\"config %O\", config);\n        // --ruledir\n        if (config.rulePaths) {\n            // load in additional rules\n            config.rulePaths.forEach(rulesdir => {\n                debug(\"Loading rules from %o\", rulesdir);\n                this.ruleManager.loadRules(rulesdir);\n            });\n        }\n        // --rule\n        if (config.rules) {\n            // load in additional rules\n            config.rules.forEach(ruleName => {\n                this.loadRule(ruleName);\n            });\n        }\n        // --preset\n        if (config.presets) {\n            config.presets.forEach(presetName => {\n                this.loadPreset(presetName);\n            });\n        }\n        // --plugin\n        if (config.plugins) {\n            // load in additional rules from plugin\n            config.plugins.forEach(pluginName => {\n                const plugin = this.loadPlugin(pluginName);\n                // register plugin.Processor\n                if (plugin.hasOwnProperty(\"Processor\")) {\n                    this.textLint.addProcessor(plugin.Processor);\n                }\n            });\n        }\n        const textlintConfig = config ? config.toJSON() : {};\n        this.textLint.setupRules(this.ruleManager.getAllRules(), textlintConfig.rulesConfig);\n    }\n\n    /**\n     * add rule to config.rules\n     * if rule already exists, then not added\n     * @param {string} ruleName\n     */\n    addRule(ruleName) {\n        if (Array.isArray(this.config.rules) && this.config.rules.indexOf(ruleName) === -1) {\n            this.config.rules.push(ruleName);\n            this._setupRules(this.config);\n        }\n    }\n\n    /**\n     * set directory to use as root directory to load rule.\n     * @param {string} directory as root directory to load rule\n     * @deprecated please use\n     *\n     * ```\n     * new TextLintEngine({\n     *  rulesBaseDirectory: directory\n     * })\n     * ```\n     */\n    setRulesBaseDirectory(directory) {\n        this.config.rulesBaseDirectory = directory;\n        this._setupRules(this.config);\n    }\n\n    /**\n     * load rule from plugin name.\n     * plugin module has `rules` object and define rule with plugin prefix.\n     * @param {string} pluginName\n     */\n    loadPlugin(pluginName) {\n        // TODO: ignore already loaded plugin\n        const PLUGIN_NAME_PREFIX = this.config.constructor.PLUGIN_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + PLUGIN_NAME_PREFIX);\n        const pluginNameWithoutPrefix = pluginName.replace(prefixMatch, \"\");\n        const baseDir = this.config.rulesBaseDirectory || \"\";\n        const textlintRuleName = `${PLUGIN_NAME_PREFIX}${ pluginName }`;\n        const pkgPath = tryResolve(path.join(baseDir, textlintRuleName)) || tryResolve(path.join(baseDir, pluginName));\n        if (!pkgPath) {\n            throw new ReferenceError(`plugin: ${ pluginName } is not found`);\n        }\n        debug(\"Loading rules from plugin: %s\", pkgPath);\n        const plugin = interopRequire(pkgPath);\n        // Processor plugin doesn't define rules\n        if (plugin.hasOwnProperty(\"rules\")) {\n            this.ruleManager.importPlugin(plugin.rules, pluginNameWithoutPrefix);\n        }\n        return plugin;\n    }\n\n    loadPreset(presetName) {\n        // ignore already defined rule\n        // ignore rules from rulePaths because avoid ReferenceError is that try to require.\n        const RULE_NAME_PREFIX = this.config.constructor.RULE_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const presetRuleNameWithoutPrefix = presetName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(presetRuleNameWithoutPrefix)) {\n            Logger.warn(`${presetRuleNameWithoutPrefix} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n        const baseDir = this.config.rulesBaseDirectory || \"\";\n        const textlintRuleName = `${RULE_NAME_PREFIX}${ presetRuleNameWithoutPrefix }`;\n        const pkgPath = tryResolve(path.join(baseDir, textlintRuleName)) || tryResolve(path.join(baseDir, presetName));\n        if (!pkgPath) {\n            throw new ReferenceError(`preset: ${ presetRuleNameWithoutPrefix } is not found`);\n        }\n        debug(\"Loading rules from preset: %s\", pkgPath);\n        const preset = interopRequire(pkgPath);\n        // Processor plugin doesn't define rules\n        this.ruleManager.importPlugin(preset.rules, presetRuleNameWithoutPrefix);\n        return preset;\n    }\n\n    /**\n     * load rule file with `ruleName` and define rule.\n     * if rule is not found, then throw ReferenceError.\n     * if already rule is loaded, do not anything.\n     * @param {string} ruleName\n     */\n    loadRule(ruleName) {\n        // ignore already defined rule\n        // ignore rules from rulePaths because avoid ReferenceError is that try to require.\n        const RULE_NAME_PREFIX = this.config.constructor.RULE_NAME_PREFIX;\n        const prefixMatch = new RegExp(\"^\" + RULE_NAME_PREFIX);\n        const definedRuleName = ruleName.replace(prefixMatch, \"\");\n        // ignore plugin's rule\n        if (isPluginRuleKey(definedRuleName)) {\n            Logger.warn(`${definedRuleName} is Plugin's rule. This is unknown case, please report issue.`);\n            return;\n        }\n        if (this.ruleManager.isDefinedRule(definedRuleName)) {\n            return;\n        }\n        const baseDir = this.config.rulesBaseDirectory || \"\";\n        const textlintRuleName = `${RULE_NAME_PREFIX}${ ruleName }`;\n        const pkgPath = tryResolve(path.join(baseDir, textlintRuleName)) || tryResolve(path.join(baseDir, ruleName));\n        if (!pkgPath) {\n            throw new ReferenceError(`rule: ${ ruleName } is not found`);\n        }\n        debug(\"Loading rules from %s\", pkgPath);\n        const ruleCreator = interopRequire(pkgPath);\n        this.ruleManager.defineRule(definedRuleName, ruleCreator);\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     */\n    resetRules() {\n        this.textLint.resetRules();\n        this.ruleManager.resetRules();\n    }\n\n    /**\n     * Executes the current configuration on an array of file and directory names.\n     * @param {String[]}  files An array of file and directory names.\n     * @returns {TextLintResult[]} The results for all files that were linted.\n     */\n    executeOnFiles(files) {\n        const targetFiles = findFiles(files, this.availableExtensions);\n        const results = targetFiles.map(file => {\n            return this.textLint.lintFile(file);\n        });\n        return Promise.all(results);\n    }\n\n    /**\n     * If want to lint a text, use it.\n     * But, if you have a target file, use {@link executeOnFiles} instead of it.\n     * @param {string} text linting text content\n     * @param {string} ext ext is a type for linting. default: \".txt\"\n     * @returns {TextLintResult[]}\n     */\n    executeOnText(text, ext = \".txt\") {\n        // filepath or ext\n        const actualExt = ext[0] === \".\" ? ext : path.extname(ext);\n        if (actualExt.length === 0) {\n            throw new Error(\"should specify the extension.\\nex) .md\");\n        }\n        return this.textLint.lintText(text, actualExt).then(result => {\n            return [result];\n        });\n    }\n\n    /**\n     * Fixes the current configuration on an array of file and directory names.\n     * @param {String[]}  files An array of file and directory names.\n     * @returns {TextLintFixResult[]} The results for all files that were linted.\n     */\n    fixFiles(files) {\n        const targetFiles = findFiles(files, this.availableExtensions);\n        const results = targetFiles.map(file => {\n            return this.textLint.fixFile(file);\n        });\n        return Promise.all(results);\n    }\n\n    /**\n     * Fix texts with ext option.\n     *\n     * @param {string} text linting text content\n     * @param {string} ext ext is a type for linting. default: \".txt\"\n     * @returns {TextLintFixResult[]}\n     */\n    fixText(text, ext = \".txt\") {\n        // filepath or ext\n        const actualExt = ext[0] === \".\" ? ext : path.extname(ext);\n        if (actualExt.length === 0) {\n            throw new Error(\"should specify the extension.\\nex) .md\");\n        }\n        return this.textLint.fixText(text, actualExt).then(result => {\n            return [result];\n        });\n    }\n\n    /**\n     * format {@link results} and return output text.\n     * @param {TextLintResult[]} results the collection of result\n     * @returns {string} formatted output text\n     * @example\n     *  console.log(formatResults(results));\n     */\n    formatResults(results) {\n        const formatterConfig = {\n            formatterName: this.config.formatterName,\n            color: this.config.color\n        };\n        const formatter = createFormatter(formatterConfig);\n        return formatter(results);\n    }\n\n    /**\n     * Checks if the given message is an error message.\n     * @param {TextLintMessage} message The message to check.\n     * @returns {boolean} Whether or not the message is an error message.\n     */\n    isErrorMessage(message) {\n        return message.severity === 2;\n    }\n\n    /**\n     * Checks if the given results contain error message.\n     * If there is even one error then return true.\n     * @param {TextLintResult[]} results Linting result collection\n     * @returns {Boolean} Whether or not the results contain error message.\n     */\n    isErrorResults(results) {\n        return results.some(result => {\n            return result.messages.some(this.isErrorMessage);\n        });\n    }\n}\n\nmodule.exports = TextLintEngine;\n"]}