{"version":3,"sources":["../src/textlint-core.js"],"names":[],"mappings":"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","file":"textlint-core.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n    textlint-core.js is a class\n    textlint.js is a singleton object that is instance of textlint-core.js.\n */\nconst Promise = require(\"bluebird\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst assert = require(\"assert\");\nconst SourceCode = require(\"./rule/source-code\");\nconst SourceCodeFixer = require(\"./fixer/source-code-fixer\");\nconst debug = require(\"debug\")(\"textlint:core\");\nimport CoreTask from \"./task/textlint-core-task\";\nimport {assertRuleShape} from \"./rule/rule-creator-helper\";\nimport FixerTask from \"./task/fixer-task\";\nimport LinterTask from \"./task/linter-task\";\n\nimport {getProcessorMatchExtension} from \"./util/proccesor-helper\";\nimport {Processor as MarkdownProcessor} from \"textlint-plugin-markdown\";\nimport {Processor as TextProcessor} from \"textlint-plugin-text\";\n\nexport default class TextlintCore {\n    constructor(config = {}) {\n        // this.config often is undefined.\n        this.config = config;\n        this.rules = {};\n        this.rulesConfig = {};\n        // FIXME: in the future, this.processors is empty by default.\n        // Markdown and Text are for backward compatibility.\n        this.processors = [\n            new MarkdownProcessor(config),\n            new TextProcessor(config)\n        ];\n    }\n\n    // unstable API\n    addProcessor(Processor) {\n        // add first\n        this.processors.unshift(new Processor(this.config));\n    }\n\n    /**\n     * Register rules to EventEmitter.\n     * if want to release rules, please call {@link this.resetRules}.\n     * @param {object} rules rule objects array\n     * @param {object} [rulesConfig] ruleConfig is object\n     */\n    setupRules(rules = {}, rulesConfig = {}) {\n        const ignoreDisableRules = (rules) => {\n            const resultRules = Object.create(null);\n            Object.keys(rules).forEach(key => {\n                const ruleCreator = rules[key];\n                assertRuleShape(ruleCreator, key);\n                // \"rule-name\" : false => disable\n                const ruleConfig = rulesConfig && rulesConfig[key];\n                if (ruleConfig !== false) {\n                    debug(\"use \\\"%s\\\" rule\", key);\n                    resultRules[key] = rules[key];\n                }\n\n            });\n            return resultRules;\n        };\n        this.rules = ignoreDisableRules(rules);\n        this.rulesConfig = rulesConfig;\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     */\n    resetRules() {\n        // noop\n    }\n\n    _lintByProcessor(processor, text, ext, filePath) {\n        assert(processor, `processor is not found for ${ext}`);\n        const {preProcess, postProcess} = processor.processor(ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const ast = preProcess(text, filePath);\n        const sourceCode = new SourceCode({\n            text,\n            ast,\n            ext,\n            filePath\n        });\n        const task = new LinterTask({\n            config: this.config,\n            rules: this.rules,\n            rulesConfig: this.rulesConfig,\n            sourceCode: sourceCode\n        });\n        return new Promise((resolve, reject) => {\n            const messages = [];\n            task.on(CoreTask.events.message, message => {\n                messages.push(message);\n            });\n            task.on(CoreTask.events.error, error => {\n                reject(error);\n            });\n            task.on(CoreTask.events.complete, () => {\n                const result = postProcess(messages, filePath);\n                if (result.filePath == null) {\n                    result.filePath = `<Unkown${ext}>`;\n                }\n                assert(result.filePath && result.messages.length >= 0, \"postProcess should return { messages, filePath } \");\n                resolve(result);\n            });\n            task.process(ast);\n        });\n    }\n\n    /**\n     * lint text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text\n     * @param {string} ext ext is extension. default: .txt\n     * @returns {TextLintResult}\n     */\n    lintText(text, ext = \".txt\") {\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._lintByProcessor(processor, text, ext);\n    }\n\n    /**\n     * lint markdown text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text markdown format text\n     * @returns {TextLintResult}\n     */\n    lintMarkdown(text) {\n        const ext = \".md\";\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._lintByProcessor(processor, text, ext);\n    }\n\n    /**\n     * lint file and return result object\n     * @param {string} filePath\n     * @returns {TextLintResult} result\n     */\n    lintFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        const text = fs.readFileSync(absoluteFilePath, \"utf-8\");\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._lintByProcessor(processor, text, ext, absoluteFilePath);\n    }\n\n    /**\n     * fix file and return fix result object\n     * @param {string} filePath\n     * @returns {TextLintFixResult}\n     */\n    fixFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        const text = fs.readFileSync(absoluteFilePath, \"utf-8\");\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._fixProcess(processor, text, ext, filePath);\n    }\n\n    /**\n     * fix texts and return fix result object\n     * @param {string} text\n     * @param {string} ext\n     * @returns {TextLintFixResult}\n     */\n    fixText(text, ext = \".txt\") {\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._fixProcess(processor, text, ext);\n    }\n\n    _fixProcess(processor, text, ext, filePath) {\n        const fixerRules = Object.keys(this.rules).map(ruleName => {\n            return {\n                ruleName,\n                rule: this.rules[ruleName]\n            };\n        }).filter(({rule}) => {\n            return typeof rule.fixer !== \"undefined\";\n        });\n        const {preProcess, postProcess} = processor.processor(ext);\n        // messages\n        let resultFilePath = filePath;\n        const applyingMessages = [];\n        const remainingMessages = [];\n        const originalMessages = [];\n        const fixerProcessList = fixerRules.map(({ruleName, rule}) => {\n            return (sourceText) => {\n                // create new SourceCode object\n                const newSourceCode = new SourceCode({\n                    text: sourceText,\n                    ast: preProcess(sourceText),\n                    filePath,\n                    ext\n                });\n                // create new Task\n                const task = new FixerTask({\n                    config: this.config,\n                    // { ruleName : rule }\n                    rules: {[ruleName]: rule},\n                    rulesConfig: this.rulesConfig,\n                    sourceCode: newSourceCode\n                });\n                return new Promise((resolve, reject) => {\n                    const messages = [];\n                    task.on(CoreTask.events.message, message => {\n                        messages.push(message);\n                    });\n                    task.on(CoreTask.events.error, error => {\n                        reject(error);\n                    });\n                    task.on(CoreTask.events.complete, () => {\n                        const result = postProcess(messages, filePath);\n                        resultFilePath = result.filePath;\n                        const applied = SourceCodeFixer.applyFixes(newSourceCode, result.messages);\n                        // add messages\n                        Array.prototype.push.apply(applyingMessages, applied.applyingMessages);\n                        Array.prototype.push.apply(remainingMessages, applied.remainingMessages);\n                        Array.prototype.push.apply(originalMessages, applied.messages);\n                        // if not fixed, still use current sourceText\n                        if (!applied.fixed) {\n                            return resolve(sourceText);\n                        }\n                        // if fixed, use fixed text at next\n                        resolve(applied.output);\n                    });\n                    task.process(newSourceCode.ast);\n                });\n            };\n        });\n\n        const promiseTask = fixerProcessList.reduce((promise, fixerProcess) => {\n            return promise.then((sourceText) => {\n                return fixerProcess(sourceText);\n            });\n        }, Promise.resolve(text));\n\n        return promiseTask.then(output => {\n            debug(`Finish Processing: ${resultFilePath}`);\n            debug(`applyingMessages: ${applyingMessages.length}`);\n            debug(`remainingMessages: ${remainingMessages.length}`);\n            return {\n                filePath: resultFilePath,\n                output,\n                originalMessages,\n                applyingMessages,\n                remainingMessages\n            };\n        });\n    }\n}\n"]}