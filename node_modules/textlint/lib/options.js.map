{"version":3,"sources":["../src/options.js"],"names":[],"mappings":";AACA,YAAY,CAAC;AACb,IAAM,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACzC,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC;AACxB,WAAO,EAAE,6CAA6C;AACtD,wBAAoB,EAAE,IAAI;AAC1B,wBAAoB,EAAE,IAAI;AAC1B,WAAO,EAAE,CACL,EAAC,OAAO,EAAE,SAAS,EAAC,EACpB;AACI,cAAM,EAAE,MAAM;AACd,aAAK,EAAE,GAAG;AACV,YAAI,EAAE,SAAS;AACf,mBAAW,EAAE,YAAY;KAC5B,EACD;AACI,cAAM,EAAE,QAAQ;AAChB,aAAK,EAAE,GAAG;AACV,YAAI,EAAE,cAAc;AACpB,mBAAW,EAAE,sDAAsD;AACnE,eAAO,EAAE,+BAA+B;KAC3C,EACD;AACI,cAAM,EAAE,QAAQ;AAChB,YAAI,EAAE,UAAU;AAChB,mBAAW,EAAE,iBAAiB;AAC9B,eAAO,EAAE,sBAAsB;KAClC,EACD;AACI,cAAM,EAAE,MAAM;AACd,YAAI,EAAE,gBAAgB;AACtB,mBAAW,EAAE,uBAAuB;KACvC,EACD;AACI,cAAM,EAAE,QAAQ;AAChB,YAAI,EAAE,gBAAgB;AACtB,mBAAW,EAAE,6DAA6D;KAC7E,EACD;AACI,cAAM,EAAE,UAAU;AAClB,YAAI,EAAE,gBAAgB;AACtB,mBAAW,EAAE,iEAAiE;KACjF,EACD;AACI,cAAM,EAAE,QAAQ;AAChB,aAAK,EAAE,GAAG;AACV,YAAI,EAAE,QAAQ;AACd,mBAAW,EAAE,+BAA+B;AAC5C,eAAO,EAAE,uBAAuB;KACnC,EACD;AACI,cAAM,EAAE,SAAS;AACjB,aAAK,EAAE,GAAG;AACV,YAAI,EAAE,SAAS;AACf,mBAAW,EAAE,6BAA6B;KAC7C,EACD;AACI,cAAM,EAAE,OAAO;AACf,YAAI,EAAE,SAAS;AACf,mBAAS,MAAM;AACf,mBAAW,EAAE,gCAAgC;KAChD,EACD;AACI,cAAM,EAAE,aAAa;AACrB,aAAK,EAAE,GAAG;AACV,YAAI,EAAE,cAAc;AACpB,mBAAW,EAAE,wCAAwC;KACxD,EACD;AACI,cAAM,EAAE,MAAM;AACd,YAAI,EAAE,SAAS;AACf,mBAAS,OAAO;AAChB,mBAAW,EAAE,wCAAwC;KACxD,EACD;AACI,cAAM,EAAE,OAAO;AACf,YAAI,EAAE,SAAS;AACf,mBAAS,OAAO;AAChB,mBAAW,EAAE,qBAAqB;KACrC,EACD;AACI,eAAO,EAAE,cAAc;KAC1B,EACD;AACI,cAAM,EAAE,cAAc;AACtB,YAAI,EAAE,SAAS;AACf,mBAAS,KAAK;AACd,mBAAW,EAAE,4DAA4D;AACzE,eAAO,EAAE,gBAAgB;KAC5B,EACD;AACI,cAAM,EAAE,KAAK;AACb,YAAI,EAAE,SAAS;AACf,mBAAS,KAAK;AACd,mBAAW,EAAE,4BAA4B;AACzC,eAAO,EAAE,sBAAsB;KAClC,EACD;AACI,eAAO,EAAE,aAAa;KACzB,EACD;AACI,cAAM,EAAE,OAAO;AACf,YAAI,EAAE,SAAS;AACf,mBAAS,OAAO;AAChB,mBAAW,EAAE,gCAAgC;KAChD,EACD;AACI,cAAM,EAAE,gBAAgB;AACxB,YAAI,EAAE,QAAQ;AACd,mBAAW,EAAE,sCAAsC;AACnD,eAAO,EAAE,+DAA+D;KAC3E,CACJ;CACJ,CAAC,CAAC","file":"options.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst optionator = require(\"optionator\");\nmodule.exports = optionator({\n    prepend: \"textlint [options] file.md [file.txt] [dir]\",\n    concatRepeatedArrays: true,\n    mergeRepeatedObjects: true,\n    options: [\n        {heading: \"Options\"},\n        {\n            option: \"help\",\n            alias: \"h\",\n            type: \"Boolean\",\n            description: \"Show help.\"\n        },\n        {\n            option: \"config\",\n            alias: \"c\",\n            type: \"path::String\",\n            description: \"Use configuration from this file or sharable config.\",\n            example: \"--config /path/to/.textlintrc\"\n        },\n        {\n            option: \"plugin\",\n            type: \"[String]\",\n            description: \"Specify plugins\",\n            example: \"--plugin plugin-name\"\n        },\n        {\n            option: \"rule\",\n            type: \"[path::String]\",\n            description: \"Set rule package name\"\n        },\n        {\n            option: \"preset\",\n            type: \"[path::String]\",\n            description: \"Set preset package name and load rules from preset package.\"\n        },\n        {\n            option: \"rulesdir\",\n            type: \"[path::String]\",\n            description: \"Set rules from this directory and set all default rules to off.\"\n        },\n        {\n            option: \"format\",\n            alias: \"f\",\n            type: \"String\",\n            description: \"Use a specific output format.\",\n            example: \"--format pretty-error\"\n        },\n        {\n            option: \"version\",\n            alias: \"v\",\n            type: \"Boolean\",\n            description: \"Outputs the version number.\"\n        },\n        {\n            option: \"color\",\n            type: \"Boolean\",\n            default: \"true\",\n            description: \"Disable color in piped output.\"\n        },\n        {\n            option: \"output-file\",\n            alias: \"o\",\n            type: \"path::String\",\n            description: \"Enable report to be written to a file.\"\n        },\n        {\n            option: \"init\",\n            type: \"Boolean\",\n            default: \"false\",\n            description: \"Create the config file if not existed.\"\n        },\n        {\n            option: \"quiet\",\n            type: \"Boolean\",\n            default: \"false\",\n            description: \"Report errors only.\"\n        },\n        {\n            heading: \"Experimental\"\n        },\n        {\n            option: \"experimental\",\n            type: \"Boolean\",\n            default: false,\n            description: \"Enable experimental flag.Some feature use on experimental.\",\n            example: \"--experimental\"\n        },\n        {\n            option: \"fix\",\n            type: \"Boolean\",\n            default: false,\n            description: \"Automatically fix problems\",\n            example: \"--experimental --fix\"\n        },\n        {\n            heading: \"Using stdin\"\n        },\n        {\n            option: \"stdin\",\n            type: \"Boolean\",\n            default: \"false\",\n            description: \"Lint text provided on <STDIN>.\"\n        },\n        {\n            option: \"stdin-filename\",\n            type: \"String\",\n            description: \"Specify filename to process STDIN as\",\n            example: \"cat ./README.md | textlint --stdin --stdin-filename README.md\"\n        }\n    ]\n});\n"]}