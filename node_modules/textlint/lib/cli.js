// LICENSE : MIT
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _fixerTextlintFixer = require("./fixer/textlint-fixer");

var _fixerTextlintFixer2 = _interopRequireDefault(_fixerTextlintFixer);

var _utilThrowLog = require("./util/throw-log");

var _utilLogger = require("./util/logger");

var _utilLogger2 = _interopRequireDefault(_utilLogger);

/*
 cli.js is command line **interface**

 processing role is cli-engine.js.
 @see cli-engine.js
 */
/**
 * Print results of lining text.
 * @param {string} output the output text which is formatted by {@link TextLintEngine.formatResults}
 * @param {object} options cli option object {@lint ./options.js}
 * @returns {boolean} does print result success?
 */
var Promise = require("bluebird");
var fs = require("fs");
var path = require("path");
var debug = require("debug")("textlint:cli");
var mkdirp = require("mkdirp");
var options = require("./options");
var TextLintEngine = require("./textlint-engine");
var Config = require("./config/config");
var configInit = require("./config/config-initializer");
function printResults(output, options) {
    if (!output) {
        return true;
    }
    var outputFile = options.outputFile;
    if (outputFile) {
        var filePath = path.resolve(process.cwd(), outputFile);
        if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {
            _utilLogger2["default"].error("Cannot write to output file path, it is a directory: %s", outputFile);
            return false;
        }
        try {
            mkdirp.sync(path.dirname(filePath));
            fs.writeFileSync(filePath, output);
        } catch (ex) {
            _utilLogger2["default"].error("There was a problem writing the output file:\n%s", ex);
            return false;
        }
    } else {
        _utilLogger2["default"].log(output);
    }
    return true;
}

/**
 * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as
 * for other Node.js programs to effectively run the CLI.
 */
var cli = {
    /**
     * Executes the CLI based on an array of arguments that is passed in.
     * @param {string|Array|Object} args The arguments to process.
     * @param {string} [text] The text to lint (used for TTY).
     * @returns {Promise<number>} The exit code for the operation.
     */
    execute: function execute(args, text) {
        var currentOptions;
        try {
            currentOptions = options.parse(args);
        } catch (error) {
            _utilLogger2["default"].error(error.message);
            return Promise.resolve(1);
        }
        var files = currentOptions._;
        if (currentOptions.version) {
            // version from package.json
            _utilLogger2["default"].log("v" + require("../package.json").version);
        } else if (currentOptions.init) {
            return configInit.initializeConfig(process.cwd());
        } else if (currentOptions.help || !files.length && !text) {
            _utilLogger2["default"].log(options.generateHelp());
        } else {
            // specify file name of stdin content
            var stdinFilename = currentOptions.stdinFilename;
            debug("Running on " + (text ? "text" : "files") + ", stdin-filename: " + stdinFilename);
            return this.executeWithOptions(currentOptions, files, text, stdinFilename);
        }
        return Promise.resolve(0);
    },
    /**
     * execute with cli options
     * @param {object} cliOptions
     * @param {string[]} files files are file path list
     * @param {string} text?
     * @param {string} stdinFilename?
     * @returns {Promise<number>} exit status
     */
    executeWithOptions: function executeWithOptions(cliOptions, files, text, stdinFilename) {
        var config = Config.initWithCLIOptions(cliOptions);
        var engine = new TextLintEngine(config);
        // TODO: should indirect access ruleManager
        if (!engine.ruleManager.hasRuleAtLeastOne()) {
            _utilLogger2["default"].log("\n== Not have rules, textlint do not anything ==\n=> How to set rule?\nSee https://github.com/textlint/textlint/blob/master/docs/configuring.md\n");

            return Promise.resolve(0);
        }

        if (cliOptions.fix) {
            // --fix
            (0, _utilThrowLog.throwWithoutExperimental)("--fix is experimental. use `--experimental --fix`");
            var _resultsPromise = text ? engine.fixText(text, stdinFilename) : engine.fixFiles(files);
            return _resultsPromise.then(function (results) {
                var fixer = new _fixerTextlintFixer2["default"](results);
                var output = fixer.formatResults();
                printResults(output, cliOptions);
                // return exit code
                return fixer.write() ? 0 : 1;
            });
        }

        var resultsPromise = text ? engine.executeOnText(text, stdinFilename) : engine.executeOnFiles(files);
        return resultsPromise.then(function (results) {
            var output = engine.formatResults(results);
            if (printResults(output, cliOptions)) {
                return engine.isErrorResults(results) ? 1 : 0;
            } else {
                return 1;
            }
        });
    }
};
module.exports = cli;
//# sourceMappingURL=cli.js.map