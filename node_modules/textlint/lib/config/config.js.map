{"version":3,"sources":["../../src/config/config.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst objectAssign = require(\"object-assign\");\nconst concat = require(\"unique-concat\");\nconst loadConfig = require(\"./config-loader\");\nimport {isPluginRuleKey, isPresetRuleKey} from \"../util/config-util\";\nimport {mapRulesConfig} from \"./preset-loader\";\nimport loadRulesConfigFromPlugins from \"./plugin-loader\";\nimport loadRulesConfigFromPresets from \"./preset-loader\";\n/**\n * Get rule keys from `.textlintrc` config object.\n * @param rulesConfig\n * @returns {{available: string[], disable: string[]}}\n */\nfunction separateAvailableOrDisable(rulesConfig) {\n    const ruleOf = {\n        presets: [],\n        available: [],\n        disable: []\n    };\n    if (!rulesConfig) {\n        return ruleOf;\n    }\n    Object.keys(rulesConfig).forEach(key => {\n        // `textlint-rule-preset-XXX`\n        if (isPresetRuleKey(key)) {\n            if (typeof rulesConfig[key] === \"object\" || rulesConfig[key] === true) {\n                ruleOf.presets.push(key);\n            }\n            return;\n        }\n        // `<plugin>/<rule-key>` should ignored\n        if (isPluginRuleKey(key)) {\n            return;\n        }\n        // ignore `false` value\n        if (typeof rulesConfig[key] === \"object\" || rulesConfig[key] === true) {\n            ruleOf.available.push(key);\n        } else {\n            ruleOf.disable.push(key);\n        }\n    });\n    return ruleOf;\n}\n/**\n * Convert config of preset to rulesConfig flat path format.\n *\n * e.g.)\n * {\n *  \"preset-a\" : { \"key\": \"value\"}\n * }\n * => {\"preset-a/key\": \"value\"}\n *\n * @param rulesConfig\n * @returns {{string: string}}\n */\nfunction convertRulesConfigToFlatPath(rulesConfig) {\n    if (!rulesConfig) {\n        return {};\n    }\n    const filteredConfig = {};\n    Object.keys(rulesConfig).forEach(key => {\n        if (isPresetRuleKey(key)) {\n            // <preset>/<rule>\n            objectAssign(filteredConfig, mapRulesConfig(rulesConfig[key], key));\n            return;\n        }\n        filteredConfig[key] = rulesConfig[key];\n    });\n    return filteredConfig;\n}\n/**\n * @type {TextLintConfig}\n */\nconst defaultOptions = Object.freeze({\n    // rule package names\n    rules: [],\n    // disabled rule package names\n    // always should start with empty\n    disabledRules: [],\n    // preset package names\n    // e.g.) [\"preset-foo\"]\n    presets: [],\n    // plugin package names\n    plugins: [],\n    // rules base directory that is related `rules`.\n    rulesBaseDirectory: undefined,\n    // \".textlint\" file path\n    configFile: undefined,\n    // rules config object\n    rulesConfig: {},\n    // rule directories\n    rulePaths: [],\n    extensions: [],\n    // formatter-file-name\n    // e.g.) stylish.js => set \"stylish\"\n    formatterName: \"stylish\",\n    // --no-color\n    color: true\n});\n\n// Priority: CLI > Code options > config file\nclass Config {\n    /**\n     * @return {string} rc config filename\n     * it's name use as `.<name>rc`\n     */\n    static get CONFIG_FILE_NAME() {\n        return \"textlint\";\n    }\n\n    /**\n     * @return {string} config package prefix\n     */\n    static get CONFIG_PACKAGE_PREFIX() {\n        return \"textlint-config-\";\n    }\n\n    /**\n     * @return {string} rule package's name prefix\n     */\n    static get RULE_NAME_PREFIX() {\n        return \"textlint-rule-\";\n    }\n\n    /**\n     * @return {string} rule preset package's name prefix\n     */\n    static get RULE_PRESET_NAME_PREFIX() {\n        return \"textlint-rule-preset\";\n    }\n\n    /**\n     * @return {string} plugins package's name prefix\n     */\n    static get PLUGIN_NAME_PREFIX() {\n        return \"textlint-plugin-\";\n    }\n\n    /**\n     * Create config object form command line options\n     * See options.js\n     * @param {object} cliOptions the options is command line option object. @see options.js\n     * @returns {Config}\n     */\n    static initWithCLIOptions(cliOptions) {\n        const options = {};\n        options.extensions = cliOptions.ext ? cliOptions.ext : defaultOptions.extensions;\n        options.rules = cliOptions.rule ? cliOptions.rule : defaultOptions.rules;\n        // TODO: CLI --disable <rule>?\n        options.disabledRules = defaultOptions.disabledRules;\n        options.presets = cliOptions.preset ? cliOptions.preset : defaultOptions.presets;\n        options.plugins = cliOptions.plugin ? cliOptions.plugin : defaultOptions.plugins;\n        options.configFile = cliOptions.config ? cliOptions.config : defaultOptions.configFile;\n        options.rulePaths = cliOptions.rulesdir ? cliOptions.rulesdir : defaultOptions.rulePaths;\n        options.formatterName = cliOptions.format ? cliOptions.format : defaultOptions.formatterName;\n        options.color = cliOptions.color !== undefined ? cliOptions.color : defaultOptions.color;\n        return this.initWithAutoLoading(options);\n    }\n\n    // load config and merge options.\n    static initWithAutoLoading(options = {}) {\n        // => ConfigFile\n        // configFile is optional\n        // => load .textlintrc\n        const configFileRawOptions = loadConfig(options.configFile, {\n                configPackagePrefix: this.CONFIG_PACKAGE_PREFIX,\n                configFileName: this.CONFIG_FILE_NAME\n            }) || {};\n        const configRulesObject = separateAvailableOrDisable(configFileRawOptions.rules);\n        // available rules\n        const configFileRules = configRulesObject.available;\n        // disable rules\n        const configFileDisabledRules = configRulesObject.disable;\n        const configPresets = configRulesObject.presets;\n        const configFilePlugins = configFileRawOptions.plugins || [];\n        const configFileRulesConfig = convertRulesConfigToFlatPath(configFileRawOptions.rules);\n        // => Options\n        const optionRules = options.rules || [];\n        const optionDisbaledRules = options.disabledRules || [];\n        const optionRulesConfig = options.rulesConfig || {};\n        const optionPlugins = options.plugins || [];\n        const optionPresets = options.presets || [];\n        // => Merge options and configFileOptions\n        // Priority options > configFile\n        const rules = concat(optionRules, configFileRules);\n        const disabledRules = concat(optionDisbaledRules, configFileDisabledRules);\n        const rulesConfig = objectAssign({}, configFileRulesConfig, optionRulesConfig);\n        const plugins = concat(optionPlugins, configFilePlugins);\n        const presets = concat(optionPresets, configPresets);\n        const mergedOptions = objectAssign({}, options, {\n            rules,\n            disabledRules,\n            rulesConfig,\n            plugins,\n            presets\n        });\n        return new this(mergedOptions);\n    }\n\n    /**\n     * initialize with options.\n     * @param {TextLintConfig} options the option object is defined as TextLintConfig.\n     * @returns {Config}\n     * @constructor\n     */\n    constructor(options = {}) {\n        /**\n         * @type {string|null} path to .textlintrc file.\n         */\n        this.configFile = options.configFile;\n        this.rulesBaseDirectory = options.rulesBaseDirectory\n            ? options.rulesBaseDirectory\n            : defaultOptions.rulesBaseDirectory;\n        // rule names that are defined in ,textlintrc\n        /**\n         * @type {string[]} rule key list\n         * but, plugins's rules are not contained in `rules`\n         * plugins's rule are loaded in TextLintEngine\n         */\n        this.rules = options.rules ? options.rules : defaultOptions.rules;\n        /**\n         * @type {string[]} rule key list\n         * These rule is set `false` to options\n         */\n        this.disabledRules = options.disabledRules ? options.disabledRules : defaultOptions.disabledRules;\n        /**\n         * @type {string[]} preset key list\n         */\n        this.presets = options.presets ? options.presets : defaultOptions.presets;\n        // => load plugins\n        // this.rules has not contain plugin rules\n        // =====================\n        this.plugins = options.plugins ? options.plugins : defaultOptions.plugins;\n        const pluginRulesConfig = loadRulesConfigFromPlugins(this.plugins, {\n            baseDir: this.rulesBaseDirectory,\n            pluginPrefix: this.constructor.PLUGIN_NAME_PREFIX\n        });\n        const presetRulesConfig = loadRulesConfigFromPresets(this.presets, {\n            baseDir: this.rulesBaseDirectory,\n            rulePrefix: this.constructor.RULE_NAME_PREFIX\n        });\n        this.rulesConfig = objectAssign({}, presetRulesConfig, pluginRulesConfig, options.rulesConfig);\n        /**\n         * @type {string[]}\n         */\n        this.extensions = options.extensions ? options.extensions : defaultOptions.extensions;\n        /**\n         * @type {string[]}\n         */\n        this.rulePaths = options.rulePaths ? options.rulePaths : defaultOptions.rulePaths;\n        /**\n         * @type {string}\n         */\n        this.formatterName = options.formatterName ? options.formatterName : defaultOptions.formatterName;\n        /**\n         * @type {boolean}\n         */\n        this.color = options.color !== undefined ? options.color : defaultOptions.color;\n    }\n\n    toJSON() {\n        const r = Object.create(null);\n        Object.keys(this).forEach(key => {\n            if (!this.hasOwnProperty(key)) {\n                return;\n            }\n            const value = this[key];\n            if (value == null) {\n                return;\n            }\n            r[key] = typeof value.toJSON !== \"undefined\" ? value.toJSON() : value;\n        });\n        return r;\n    }\n}\nmodule.exports = Config;\n"]}