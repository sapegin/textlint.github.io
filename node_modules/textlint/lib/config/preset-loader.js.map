{"version":3,"sources":["../../src/config/preset-loader.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;qBAoBW,kBAAkB;AAnB1C,IAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAClD,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC9C,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AACtB,SAAS,cAAc,CAAC,WAAW,EAAE,UAAU,EAAE;AACpD,QAAM,MAAM,GAAG,EAAE,CAAC;AAClB,QAAI,WAAW,KAAK,SAAS,EAAE;AAC3B,eAAO,MAAM,CAAC;KACjB;;AAED,QAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;AACjC,eAAO,MAAM,CAAC;KACjB;AACD,UAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACpC,cAAM,CAAI,UAAU,SAAI,GAAG,CAAG,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;KACrD,CAAC,CAAC;AACH,WAAO,MAAM,CAAC;CACjB;;;;AAEc,SAAS,kBAAkB,CAAC,SAAS,EAAO,IAG1D,EAAE;QAHwC,SAAS,gBAAT,SAAS,GAAG,EAAE;uBAAE,IAG1D,CAFG,OAAO;QAAP,OAAO,gCAAG,GAAG;QACb,UAAU,GAF6C,IAG1D,CADG,UAAU;;AAEV,QAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,aAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAI;AAC1B,YAAM,gBAAgB,QAAM,UAAU,GAAI,QAAQ,AAAG,CAAC;AACtD,YAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC7G,YAAI,CAAC,OAAO,EAAE;AACV,kBAAM,IAAI,cAAc,CAAK,QAAQ,mBAAiB,CAAC;SAC1D;AACD,YAAI,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;AACrC,YAAI,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AACjC,kBAAM,IAAI,KAAK,CAAI,QAAQ,oBAAiB,CAAC;SAChD;AACD,YAAI,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;AACvC,kBAAM,IAAI,KAAK,CAAI,QAAQ,0BAAuB,CAAC;SACtD;;AAED,oBAAY,CAAC,iBAAiB,EAAE,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;KACjF,CAAC,CAAC;AACH,WAAO,iBAAiB,CAAC;CAC5B","file":"preset-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst interopRequire = require(\"interop-require\");\nconst tryResolve = require(\"try-resolve\");\nconst ObjectAssign = require(\"object-assign\");\nconst path = require(\"path\");\nexport function mapRulesConfig(rulesConfig, presetName) {\n    const mapped = {};\n    if (rulesConfig === undefined) {\n        return mapped;\n    }\n    // ignore \"preset-foo\": false\n    if (typeof rulesConfig !== \"object\") {\n        return mapped;\n    }\n    Object.keys(rulesConfig).forEach(key => {\n        mapped[`${presetName}/${key}`] = rulesConfig[key];\n    });\n    return mapped;\n}\n// load rulesConfig from plugins\nexport default function findRulesAndConfig(ruleNames = [], {\n    baseDir = \".\",\n    rulePrefix\n}) {\n    const presetRulesConfig = {};\n    ruleNames.forEach(ruleName => {\n        const textlintRuleName = `${rulePrefix}${ ruleName }`;\n        const pkgPath = tryResolve(path.join(baseDir, textlintRuleName)) || tryResolve(path.join(baseDir, ruleName));\n        if (!pkgPath) {\n            throw new ReferenceError(`${ ruleName } is not found`);\n        }\n        var preset = interopRequire(pkgPath);\n        if (!preset.hasOwnProperty(\"rules\")) {\n            throw new Error(`${ruleName} has not rules`);\n        }\n        if (!preset.hasOwnProperty(\"rulesConfig\")) {\n            throw new Error(`${ruleName} has not rulesConfig`);\n        }\n        // set config of <rule> to \"<preset>/<rule>\"\n        ObjectAssign(presetRulesConfig, mapRulesConfig(preset.rulesConfig, ruleName));\n    });\n    return presetRulesConfig;\n}\n"]}