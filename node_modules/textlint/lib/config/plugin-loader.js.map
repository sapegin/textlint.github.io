{"version":3,"sources":["../../src/config/plugin-loader.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;;qBAiBW,0BAA0B;AAhBlD,IAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAClD,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC1C,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC9C,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,wBAAwB,CAAC,CAAC;AACzD,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;AACtB,SAAS,cAAc,CAAC,WAAW,EAAE,UAAU,EAAE;AACpD,QAAM,MAAM,GAAG,EAAE,CAAC;AAClB,QAAI,WAAW,KAAK,SAAS,EAAE;AAC3B,eAAO,MAAM,CAAC;KACjB;AACD,UAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACpC,cAAM,CAAI,UAAU,SAAI,GAAG,CAAG,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;KACrD,CAAC,CAAC;AACH,WAAO,MAAM,CAAC;CACjB;;;;AAEc,SAAS,0BAA0B,CAAC,WAAW,EAAO,IAGhE,EAAE;QAH4C,WAAW,gBAAX,WAAW,GAAG,EAAE;uBAAE,IAGhE,CAFD,OAAO;QAAP,OAAO,gCAAG,GAAG;QACb,YAAY,GAFqD,IAGhE,CADD,YAAY;;AAEZ,QAAI,iBAAiB,GAAG,EAAE,CAAC;AAC3B,eAAW,CAAC,OAAO,CAAC,UAAA,UAAU,EAAI;AAC9B,YAAM,gBAAgB,QAAM,YAAY,GAAG,UAAU,AAAE,CAAC;AACxD,YAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;AAC/G,YAAI,CAAC,OAAO,EAAE;AACV,kBAAM,IAAI,cAAc,aAAY,UAAU,qCAC3C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAG,CAAC;SACxC;AACD,YAAI,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;AACrC,YAAI,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;AACvC,iBAAK,CAAI,UAAU,0BAAuB,CAAC;AAC3C,mBAAO;SACV;;AAED,oBAAY,CAAC,iBAAiB,EAAE,cAAc,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;KACnF,CAAC,CAAC;AACH,WAAO,iBAAiB,CAAC;CAC5B","file":"plugin-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst interopRequire = require(\"interop-require\");\nconst tryResolve = require(\"try-resolve\");\nconst ObjectAssign = require(\"object-assign\");\nconst debug = require(\"debug\")(\"textlint:plugin-loader\");\nconst path = require(\"path\");\nexport function mapRulesConfig(rulesConfig, pluginName) {\n    const mapped = {};\n    if (rulesConfig === undefined) {\n        return mapped;\n    }\n    Object.keys(rulesConfig).forEach(key => {\n        mapped[`${pluginName}/${key}`] = rulesConfig[key];\n    });\n    return mapped;\n}\n// load rulesConfig from plugins\nexport default function loadRulesConfigFromPlugins(pluginNames = [], {\n    baseDir = \".\",\n    pluginPrefix\n    }) {\n    var pluginRulesConfig = {};\n    pluginNames.forEach(pluginName => {\n        const textlintRuleName = `${pluginPrefix}${pluginName}`;\n        const pkgPath = tryResolve(path.join(baseDir, textlintRuleName)) || tryResolve(path.join(baseDir, pluginName));\n        if (!pkgPath) {\n            throw new ReferenceError(`plugin:${ pluginName } is not found.\nFail to load ${path.join(baseDir, pluginName)}`);\n        }\n        var plugin = interopRequire(pkgPath);\n        if (!plugin.hasOwnProperty(\"rulesConfig\")) {\n            debug(`${pluginName} has not rulesConfig`);\n            return;\n        }\n        // set config of <rule> to \"<plugin>/<rule>\"\n        ObjectAssign(pluginRulesConfig, mapRulesConfig(plugin.rulesConfig, pluginName));\n    });\n    return pluginRulesConfig;\n}\n"]}