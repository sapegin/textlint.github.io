// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mapRulesConfig = mapRulesConfig;
exports["default"] = loadRulesConfigFromPlugins;
var interopRequire = require("interop-require");
var tryResolve = require("try-resolve");
var ObjectAssign = require("object-assign");
var debug = require("debug")("textlint:plugin-loader");
var path = require("path");

function mapRulesConfig(rulesConfig, pluginName) {
    var mapped = {};
    if (rulesConfig === undefined) {
        return mapped;
    }
    Object.keys(rulesConfig).forEach(function (key) {
        mapped[pluginName + "/" + key] = rulesConfig[key];
    });
    return mapped;
}

// load rulesConfig from plugins

function loadRulesConfigFromPlugins(pluginNames, _ref) {
    if (pluginNames === undefined) pluginNames = [];
    var _ref$baseDir = _ref.baseDir;
    var baseDir = _ref$baseDir === undefined ? "." : _ref$baseDir;
    var pluginPrefix = _ref.pluginPrefix;

    var pluginRulesConfig = {};
    pluginNames.forEach(function (pluginName) {
        var textlintRuleName = "" + pluginPrefix + pluginName;
        var pkgPath = tryResolve(path.join(baseDir, textlintRuleName)) || tryResolve(path.join(baseDir, pluginName));
        if (!pkgPath) {
            throw new ReferenceError("plugin:" + pluginName + " is not found.\nFail to load " + path.join(baseDir, pluginName));
        }
        var plugin = interopRequire(pkgPath);
        if (!plugin.hasOwnProperty("rulesConfig")) {
            debug(pluginName + " has not rulesConfig");
            return;
        }
        // set config of <rule> to "<plugin>/<rule>"
        ObjectAssign(pluginRulesConfig, mapRulesConfig(plugin.rulesConfig, pluginName));
    });
    return pluginRulesConfig;
}
//# sourceMappingURL=plugin-loader.js.map