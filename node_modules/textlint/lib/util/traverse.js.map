{"version":3,"sources":["../../src/util/traverse.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;AACb,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,mBAAmB,CAAC,CAAC;;;;;;;;;;;AAWpD,SAAS,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC/C,QAAM,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAE/B,aAAS,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE;AAC1B,aAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAChB,UAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;;AAEzD,gBAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AACjB,uBAAO;aACV;AACD,gBAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7D,gBAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;;AAEvC,gBAAI,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE;;AAE9B,qBAAK,eAAc,QAAQ,CAAI,CAAC;AAChC,uBAAO;aACV;;AAED,gBAAI,QAAQ,CAAC,MAAM,EAAE,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;AACtE,wBAAQ,CAAC,QAAQ,CAAC,CAAC;aACtB,MAAM,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE;AAC/B,wBAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACzB;SACJ,CAAC,CAAC;AACH,aAAK,CAAC,GAAG,EAAE,CAAC;KACf;;AAED,QAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAErC,QAAI,QAAQ,KAAK,GAAG,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;AAC1F,aAAK,eAAc,IAAI,CAAI,CAAC;AAC5B,eAAO;KACV;;AAED,QAAI,IAAI,CAAC,MAAM,EAAE,EAAE;AACf,YAAI,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;AAC7C,oBAAQ,CAAC,IAAI,CAAC,CAAC;SAClB;KACJ,MAAM;AACH,gBAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;KACtB;CACJ;;;;;;;;;AASD,MAAM,CAAC,OAAO,GAAG,SAAS,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE;AAClD,QAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;AAC5B,QAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAChC,QAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACtC,SAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AAClB,YAAI,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;KAC7C,CAAC,CAAC;CACN,CAAC","file":"traverse.js","sourcesContent":["/**\n * @fileoverview Simple directory traversal logic.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst debug = require(\"debug\")(\"textlint:traverse\");\n/**\n * Walks a path recursively calling the callback on each file.\n * @param {string} name The file or directory path.\n * @param {string[]} extensions The file extensions that should cause the callback\n *      to be called.\n * @param {Function} exclude The function to check if file/path should be excluded.\n * @param {Function} callback The function to call on each file.\n * @returns {void}\n * @private\n */\nfunction walk(name, extensions, exclude, callback) {\n    const stat = fs.statSync(name);\n\n    function traverse(dir, stack) {\n        stack.push(dir);\n        fs.readdirSync(path.join.apply(path, stack)).forEach(file => {\n            // skip all hidden things (dirs, files, links)\n            if (file[0] === \".\") {\n                return;\n            }\n            const filePath = path.join.apply(path, stack.concat([file]));\n            const fileStat = fs.statSync(filePath);\n            // if this file or directory is excluded from linting, skip over it.\n            if (exclude && exclude(filePath)) {\n                // console.log(\"Ignoring \" + filePath);\n                debug(`Ignoring ${ filePath }`);\n                return;\n            }\n            // only call callback for files with correct extensions\n            if (fileStat.isFile() && extensions.indexOf(path.extname(filePath)) > -1) {\n                callback(filePath);\n            } else if (fileStat.isDirectory()) {\n                traverse(file, stack);\n            }\n        });\n        stack.pop();\n    }\n\n    const basename = path.basename(name);\n    // don't ignore cases like 'textlint ./'\n    if (basename !== \".\" && basename !== \"..\" && basename[0] === \".\" || exclude && exclude(name)) {\n        debug(`Ignoring ${ name }`);\n        return;\n    }\n    // always call callback for any files that are passed on the command line\n    if (stat.isFile()) {\n        if (extensions.indexOf(path.extname(name)) > -1) {\n            callback(name);\n        }\n    } else {\n        traverse(name, []);\n    }\n}\n/**\n * Traverses multiple directories and calls a callback on each file.\n * @param {Object} options The option for the traversal.\n * param {string[]} options.files An array of file and directory paths to traverse.\n * param {Function} options.exclude The function to check if file/path should be excluded.\n * @param {Function} callback A function to call for each file.\n * @returns {void}\n */\nmodule.exports = function traverse(options, callback) {\n    const files = options.files;\n    const exclude = options.exclude;\n    const extensions = options.extensions;\n    files.forEach(file => {\n        walk(file, extensions, exclude, callback);\n    });\n};\n"]}