"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _fs = require("fs");

var fs = _interopRequireWildcard(_fs);

/**
 * @param {TextLintResult} result
 */
function overWriteResult(result) {
    var targetFilePath = result.filePath;
    var output = result.output;
    fs.writeFileSync(targetFilePath, output, "utf-8");
}
function getMessageType(message) {
    if (message.fatal || message.severity === 2) {
        return "Error";
    } else {
        return "Warning";
    }
}
function format(results) {

    var output = "";
    var total = 0;

    results.forEach(function (result) {

        var messages = result.applyingMessages;
        total += messages.length;

        messages.forEach(function (message) {
            output += "Fixedâœ” ";
            output += result.filePath + ": ";
            output += "line " + (message.line || 0);
            output += ", col " + (message.column || 0);
            output += ", " + getMessageType(message);
            output += " - " + message.message;
            output += message.ruleId ? " (" + message.ruleId + ")" : "";
            output += "\n";
        });
    });

    if (total > 0) {
        output += "\n\nFixed " + total + " problem" + (total !== 1 ? "s" : "");
    }

    return output;
}

var TextLintFixer = (function () {
    /**
     *
     * @param {TextLintResult[]}results
     */

    function TextLintFixer(results) {
        _classCallCheck(this, TextLintFixer);

        this.results = results;
    }

    _createClass(TextLintFixer, [{
        key: "formatResults",
        value: function formatResults() {
            return format(this.results);
        }
    }, {
        key: "write",
        value: function write() {
            this.results.forEach(overWriteResult);
            return true;
        }
    }]);

    return TextLintFixer;
})();

exports["default"] = TextLintFixer;
module.exports = exports["default"];
//# sourceMappingURL=textlint-fixer.js.map