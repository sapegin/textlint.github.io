{"version":3,"sources":["../src/textlint-rule-rousseau.js"],"names":[],"mappings":"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","file":"textlint-rule-rousseau.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst {RuleHelper} = require(\"textlint-rule-helper\");\nconst StringSource = require(\"textlint-util-to-string\").default;\nconst rousseau = require(\"rousseau\");\nconst ObjectAssign = require(\"object-assign\");\nconst defaultOptions = {\n    // \"suggestion\", \"warning\", \"error\"\n    showLevels: [\"suggestion\", \"warning\", \"error\"],\n    // ignore check type of https://github.com/GitbookIO/rousseau#checks\n    ignoreTypes: [],\n    // ignore textlint's node type\n    ignoreInlineNodeTypes: undefined\n};\n\nconst mapNode = function (ast, mapFn) {\n    return (function preorder(node, index, parent) {\n        const newNode = ObjectAssign({}, mapFn(node, index, parent));\n        if (node.children) {\n            newNode.children = node.children.map(function (child, index) {\n                return preorder(child, index, node);\n            });\n        }\n        return newNode;\n    }(ast, null, null));\n};\n\nexport default function textlintRousseau(context, options = defaultOptions) {\n    const helper = new RuleHelper(context);\n    const {Syntax, RuleError, report, getSource} = context;\n    const showLevels = options.showLevels || defaultOptions.showLevels;\n    const ignoreTypes = options.ignoreTypes || defaultOptions.ignoreTypes;\n    const ignoreInlineNodeTypes = options.ignoreInlineNodeTypes || [Syntax.Code];\n    const isShowType = (type)=> {\n        return ignoreTypes.indexOf(type) === -1;\n    };\n    const isShowLevel = (level) => {\n        return showLevels.indexOf(level) !== -1;\n    };\n    /*\n    {\n        // Type of check that output this suggestion\n        type: \"so\",\n\n        // Level of importance\n        // \"suggestion\", \"warning\", \"error\"\n        level: \"warning\",\n\n        // Index in the text\n        index: 10,\n\n        // Size of the section in the text\n        offset: 2,\n\n        // Message to describe the suggestion\n        message: \"omit 'So' from the beginning of sentences\",\n\n        // Replacements suggestion\n        replacements: [\n            {\n                value: \"\"\n            }\n        ]\n    }\n     */\n    const createSuggest = (replacements) => {\n        if (replacements.length === 0) {\n            return \"\";\n        }\n        return \"\\nSuggestions:\\n\"\n            + replacements.map(({value}) => {\n                return \"=> \" + value;\n            }).join(\"\\n\");\n    };\n    const reportError = (node, source, result) => {\n        const level = result.level;\n        const type = result.type;\n        // if not contains showing options, ignore this result\n        if (!isShowLevel(level)) {\n            return;\n        }\n        if (!isShowType(type)) {\n            return;\n        }\n        const index = source.originalIndexFromIndex(result.index);\n        const suggestions = createSuggest(result.replacements);\n        const ruleError = new RuleError(`${level}(${type}) ${result.message}${suggestions}`, {\n            index\n        });\n        report(node, ruleError);\n    };\n\n    return {\n        [Syntax.Paragraph](node){\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const filteredNode = mapNode(node, (node) => {\n                const index = ignoreInlineNodeTypes.indexOf(node.type);\n                if (index === -1) {\n                    return node;\n                }\n                /*\n                `xxx` => code\n                 */\n                return ObjectAssign({}, node, {\n                    value: node.type.toLocaleLowerCase()\n                });\n            });\n            if (!filteredNode) {\n                return;\n            }\n            const source = new StringSource(filteredNode);\n            const text = source.toString();\n            const reportSourceError = (results) => {\n                reportError(node, source, results);\n            };\n            rousseau(text, function (err, results) {\n                if (err) {\n                    throw err;\n                }\n                results.forEach(reportSourceError);\n            });\n        }\n    }\n}"]}